@page "/estoque"
@inject ApiService _apiService

<h3>Estoque</h3>

<input @bind="termoPesquisa" @bind:event="oninput" placeholder="Pesquisar por nome ou código de barras" class="form-control mb-3" />

@if (estoques is null)
{
    <p>Carregando estoque...</p>
}
else if (estoques.Count == 0)
{
    <p>Nenhum produto encontrado no estoque.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @* <th>Código de Barras</th> *@
                <th>Nome</th>
                <th>Quantidade</th>
                <th>Qtd Minima</th>
                <th>Custo</th>
                <th>Margem</th>
                <th>Venda</th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var e in estoquesFiltrados)
            {
                <tr>
                    @* <td>@e.Produto.Barcode</td> *@
                    <td>@e.Produto.Nome</td>
                    <td>@e.Quantidade</td>
                    <td>
                        <input type="number" class="form-control" style="width: 80px;"
                               @bind="@e.QuantidadeMinima"
                               @bind:event="oninput"
                               @onchange="() => AtualizarEstoque(e)" />
                    </td>
                    <td>R$ @e.PrecoCusto?.ToString("F2")</td>
                    <td>
                        <input type="number" class="form-control" style="width: 80px;"
                               @bind="@e.Margem"
                               @bind:event="oninput"
                               @onchange="() => AtualizarEstoque(e)" />
                    </td>
                    <td>R$ @CalcularPrecoVenda(e)?.ToString("F2")</td>
                </tr>
            }
        </tbody>
    </table>

    @if (produtosAbaixoMinimo.Any())
    {
        <h4 class="mt-5 text-danger">Produtos abaixo da quantidade mínima</h4>
        <table class="table table-bordered table-striped">
            <thead class="table-danger">
                <tr>
                    <th>Nome</th>
                    <th>Quantidade Atual</th>
                    <th>Quantidade Mínima</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in produtosAbaixoMinimo)
                {
                    <tr>
                        <td>@e.Produto.Nome</td>
                        <td>@e.Quantidade</td>
                        <td>@e.QuantidadeMinima</td>
                    </tr>
                }
            </tbody>
        </table>
    }

}

@code {
    private List<Estoque> estoques = new();
    private string termoPesquisa = "";
    private List<Estoque> produtosAbaixoMinimo => estoques
    .Where(e => e.Quantidade < e.QuantidadeMinima)
    .ToList();


    private List<Estoque> estoquesFiltrados => string.IsNullOrWhiteSpace(termoPesquisa)
        ? estoques
        : estoques.Where(e => e.Produto.Nome.Contains(termoPesquisa, StringComparison.OrdinalIgnoreCase) ||
                              e.Produto.Barcode.Contains(termoPesquisa)).ToList();

    protected override async Task OnInitializedAsync()
    {
        var (response, errorMessage) = await _apiService.GetEstoque();
        estoques = response;
    }

    // Cálculo local, para refletir imediatamente na interface
    private decimal? CalcularPrecoVenda(Estoque e)
    {
        if (e.PrecoCusto.HasValue && e.Margem.HasValue)
            return e.PrecoCusto.Value + (e.PrecoCusto.Value * e.Margem.Value / 100);
        return null;
    }

    // Você pode salvar no banco chamando sua API (opcional)
    private async Task AtualizarEstoque(Estoque estoque)
    {
        estoque.PrecoVenda = CalcularPrecoVenda(estoque);
        await _apiService.AtualizarEstoque(estoque); // Crie esse método na API se quiser persistir
    }
}
