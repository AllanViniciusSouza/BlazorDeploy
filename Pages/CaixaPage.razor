@page "/"
@inject ApiService _apiService
@inject IJSRuntime JS

@inject NavigationManager Navigation

<PageTitle>Caixa</PageTitle>

@* @if (isLoading)
{
    <p>Verificando autenticação...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecionando para o login...</p>
}
else
{ *@
<h3 class="text-bg-primary text-center">Caixa Registradora</h3>

<div class="d-flex gap-2" style="max-width: 600px;">
    <div style="position: relative; flex-grow: 1;">
        <input type="text" id="entryComanda" class="form-control"
               autocomplete="off"
               @bind="entryComanda"
               @oninput="BuscarSugestoesComanda"
               placeholder="Digite a comanda" />

        @if (sugestoesComanda.Any())
        {
            <ul class="list-group"
                style="position: absolute; top: 100%; left: 0; right: 0; z-index: 10;">
                @foreach (var sugestao in sugestoesComanda)
                {
                    <li class="list-group-item list-group-item-action"
                        @onclick="@(() => SelecionarSugestaoComanda(sugestao.IdComanda))">
                        @sugestao.IdComanda
                    </li>
                }
            </ul>
        }
    </div>

    <button class="btn btn-primary" @onclick="CreateComanda" disabled="@(!cart.Any() || isProcessing)">
        Criar comanda
    </button>
</div>

    


<div class="row">
    <div class="col-md-6">
        <label for="searchNome" class="form-label fw-bold">Pesquisar por Nome</label>
        <input type="text" id="searchNome" class="form-control" @bind="searchNome" @oninput="SearchByNome" placeholder="Digite o nome do produto" />
    </div>

    @*  <div class="col-md-6">
        <label for="searchBarcode" class="form-label fw-bold">Pesquisar por Código de Barras</label>
        <input type="text" id="searchBarcode" class="form-control" @bind="searchBarcode" @oninput="SearchByBarcode" placeholder="Digite o código de barras" />
    </div> *@
</div>

<h4 class="fw-bold mt-3">Produtos Disponíveis</h4>

<div style="max-height: 300px; overflow-y: auto;">
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Preço</th>
                <th>Ação</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Produto in filteredProdutos)
            {
                <tr>
                    <td>@Produto.Nome</td>
                    <td>R$ @Produto.Preco.ToString("0.00")</td>
                    <td>
                        <button class="btn btn-success btn-sm" @onclick="() => AddToCart(Produto)">Adicionar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<h4 class="fw-bold mt-4">Carrinho</h4>
<table class="table">
    <thead>
        <tr>
            <th>Nome</th>
            <th>Preço</th>
            <th>Ação</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in cart)
        {
            <tr>
                <td>@item.Nome</td>
                <td>R$ @item.Preco.ToString("0.00")</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="() => RemoveFromCart(item)">Remover</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<h5>Total: R$ @cart.Sum(p => p.Preco).ToString("0.00")</h5>

<div class="d-flex flex-column gap-2 ms-2 mt-2" style="max-width: 400px;">
    <select class="form-select" @bind="formaPagamentoSelecionada">
        <option value="">Selecione a Forma de Pagamento</option>
        <option value="Dinheiro">Dinheiro</option>
        <option value="Credito">Crédito</option>
        <option value="Debito">Débito</option>
        <option value="Pix">Pix</option>
    </select>

    @if (formaPagamentoSelecionada == "Dinheiro")
    {
        <div>
            <label>Valor Recebido:</label>
            <InputNumber @bind-Value="valorRecebido" class="form-control" />
            @if (valorRecebido > 0)
            {
                <p class="mt-2">Troco: <strong>R$ @troco.ToString("0.00")</strong></p>
            }
        </div>
    }

    <button class="btn btn-success"
    @onclick="FinalizePurchase"
    disabled="@(!cart.Any() || string.IsNullOrEmpty(formaPagamentoSelecionada) ||
                       (formaPagamentoSelecionada == "Dinheiro" && valorRecebido < cart.Sum(p => p.Preco)))">
        Finalizar Compra
    </button>
</div>
    @* html *@
@code {
    //c#
    private string searchNome = string.Empty;
    private string searchBarcode = string.Empty;
    private string entryComanda = string.Empty;
    private List<Produto> filteredProdutos = new();
    private List<Produto> cart = new();
    private int idcomanda;
    private string formaPagamentoSelecionada = string.Empty;
    private bool isAuthenticated = false;
    private bool isLoading = true;
    private bool isProcessing = false;
    private List<Comanda> todasComandasAbertas = new();
    private List<Comanda> sugestoesComanda = new();

    private decimal valorRecebido;
    private decimal troco => valorRecebido - cart.Sum(p => p.Preco);

    private int? NumeroComanda => int.TryParse(entryComanda, out int num) ? num : (int?)null;

    protected override async Task OnInitializedAsync()
    {
        // isAuthenticated = await AuthService.IsAuthenticated();

        // if (!isAuthenticated)
        // {
        //     Navigation.NavigateTo("/login", forceLoad: true);
        // }

        // isLoading = false;

        var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
        filteredProdutos = todosProdutos;
    }

    private async Task BuscarSugestoesComanda(ChangeEventArgs e)
    {
        entryComanda = e.Value.ToString();

        if (string.IsNullOrWhiteSpace(entryComanda))
        {
            sugestoesComanda.Clear();
            return;
        }

        // Se ainda não carregou todas as comandas abertas
        if (!todasComandasAbertas.Any())
        {
            var (lista, erro) = await _apiService.GetComandas();
            todasComandasAbertas = lista ?? new();
        }

        sugestoesComanda = todasComandasAbertas
            .Where(c => c.IdComanda.Contains(entryComanda, StringComparison.OrdinalIgnoreCase))
            .Take(5) // Limita sugestões
            .ToList();
    }

    private void SelecionarSugestaoComanda(string idSelecionado)
    {
        entryComanda = idSelecionado;
        sugestoesComanda.Clear();
    }

    private async Task SearchByNome(ChangeEventArgs e)
    {
        searchBarcode = string.Empty; // Limpa a pesquisa por código de barras
        searchNome = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(searchNome))
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos;
        }
        else
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos
                                .Where(c => c.Nome.IndexOf(searchNome, StringComparison.OrdinalIgnoreCase) >= 0)
                                .ToList();
        }
    }

    private async Task SearchByBarcode(ChangeEventArgs e)
    {
        searchNome = string.Empty; // Limpa a pesquisa por nome
        searchBarcode = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(searchBarcode))
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos;
        }
        else
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos
                                .Where(c => c.Barcode == searchBarcode)
                                .ToList();
        }
    }

    private void AddToCart(Produto Produto)
    {
        cart.Add(Produto);
    }

    private void RemoveFromCart(Produto Produto)
    {
        cart.Remove(Produto);
    }

    private async Task FinalizePurchase()
    {
        var pedido = new Pedido()
            {
                ValorTotal = cart.Sum(p => p.Preco),
                DataPedido = DateTime.Now,
                FormaPagamento = formaPagamentoSelecionada
            };

        foreach (var item in cart)
        {
            var movimentacao = new MovimentacaoEstoque()
                {
                    ProdutoId = item.Id,
                    Tipo = TipoMovimentacao.Venda,
                    Quantidade = 1,
                    DataMovimentacao = DateTime.Now
                };
            await _apiService.MovimentarEstoqueAsync(movimentacao);

        }

        await _apiService.ConfirmarPedido(pedido);

        cart.Clear();
        formaPagamentoSelecionada = string.Empty;
        StateHasChanged(); // Atualiza a UI
        Console.WriteLine("Compra finalizada!");
    }

    private async Task CreateComanda()
    {
        if (isProcessing)
            return;
        
        if (string.IsNullOrEmpty(entryComanda))
            return;

        isProcessing = true;

        try
        {
            var (comandaExistente, erro) = await _apiService.GetComandaPorId(entryComanda);

            if (comandaExistente != null)
            {
                // Comanda já existe, adicionar produtos do carrinho a ela
                await AdicionarProdutosAComanda(comandaExistente.IdComanda, cart);
            }
            else
            {
                // Comanda não existe, criar uma nova
                var sucesso = await CriarNovaComanda(entryComanda, cart);
                if (sucesso)
                {
                    await AdicionarProdutosAComanda(entryComanda, cart);
                }               
            }
            await AtualizarValorComanda(entryComanda);
            cart.Clear();
            entryComanda = string.Empty;
            StateHasChanged(); // Atualiza a UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao criar ou atualizar comanda: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task AdicionarProdutosAComanda(string idComanda, List<Produto> carrinho)
    {
        //adicionar os itens na comanda
        foreach (var produto in carrinho)
        {
            var itemComanda = new ComandaItem
                {
                    PrecoUnitario = produto.Preco,
                    Quantidade = 1,
                    ProdutoId = produto.Id,
                    ProdutoNome = produto.Nome,
                    UrlImagem = produto.UrlImagem,
                    IdComanda = idComanda
                };
            var responseAddItem = await _apiService.AdicionaItemNaComanda(itemComanda);
            if (responseAddItem.Data)
            {
                // await ShowAlert("Item adicionado na comanda !");
            }
            else
            {
                await ShowAlert($"Falha ao adicionar item: {responseAddItem.ErrorMessage}");
            }
            var movimentacao = new MovimentacaoEstoque()
                {
                    ProdutoId = produto.Id,
                    Tipo = TipoMovimentacao.Venda,
                    Quantidade = 1,
                    DataMovimentacao = DateTime.Now
                };
            var responseMovimetacao = await _apiService.MovimentarEstoqueAsync(movimentacao);
            if (responseMovimetacao.Data)
            {
                // await ShowAlert("Item adicionado na comanda !");
            }
            else
            {
                // await ShowAlert($"Falha ao movimentar estoque: {responseAddItem.ErrorMessage}");
            }
        }
    }

    private async Task<bool> CriarNovaComanda(string IdComanda, List<Produto> carrinho)
    {
        //criar uma comanda
        var novaComanda = new Comanda()
            {
                DataAbertura = DateTime.Now,
                IdComanda = IdComanda,
                Status = "Aberta",
                ValorTotal = carrinho.Sum(p => p.Preco)
            };

        var responseComanda = await _apiService.CriarComanda(novaComanda);
        if (responseComanda.Data != null)
        {
            // await ShowAlert("Comanda criada!");
            return true;
        }
        else
        {
            await ShowAlert($"Falha ao criar comanda: {responseComanda.ErrorMessage}");
            return false;
        }
    }

    private async Task AtualizarValorComanda(string idComanda)
    {
        var (itensComanda, errorMessage) = await _apiService.GetItensComanda(idComanda);

        //atualizar o valor da comanda
        var (comanda, errorMessageComanda) = await _apiService.GetComandaPorId(idComanda);

        comanda.ValorTotal = itensComanda.Sum(p => p.Quantidade * p.PrecoUnitario);

        // ??? Enviar a comanda atualizada para a API para persistência no banco
        var responseUpdateComanda = await _apiService.AtualizarComanda(comanda);
        // if (!responseUpdateComanda.HasError)
        // {
        //     //await DisplayAlert("Sucesso", "Comanda atualizada!", "OK");
        //     await Navigation.PopAsync();
        // }
        // else
        // {
        //     await ShowAlert($"Falha ao criar comanda: {responseComanda.ErrorMessage}");
        // }
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }

}
