@page "/cardapio"
@layout CardapioLayout
@inject ApiService _apiService
@inject IJSRuntime JS
@inject IValidator Validator
@inject HttpClient Http

<gmpx-placeautocomplete
  id="autocompleteEndereco"
  placeholder="Digite seu endereço"
  country="br"
  style="width: 100%;">
</gmpx-placeautocomplete>

<div class="text-center mt-4">
<img src="/logo.png" class="img-fluid rounded-circle" style="max-height: 90px; object-fit: contain;" />
</div>
@if (todosProdutos == null)
{
    <p>Carregando...</p>
}
else
{
    <!-- Barra de categorias rolável -->
<div class="d-flex overflow-auto mb-3 gap-3 px-2 py-1 border-bottom" style="white-space: nowrap;">
    @foreach (var categoria in categorias)
    {
        <div class="text-center flex-shrink-0" style="width: 80px; cursor: pointer;" @onclick="() => SelecionarCategoria(categoria.Id)">
            <img src="@categoria.CaminhoImagem" class="rounded-circle mb-1" style="width: 60px; height: 60px; object-fit: cover;" />
            <div style="font-size: 0.75rem; white-space: normal;">@categoria.Nome</div>
        </div>
    }

    <div class="text-center flex-shrink-0" style="width: 80px; cursor: pointer;" @onclick="() => SelecionarCategoria(null)">
        <div class="bg-light rounded-circle d-flex align-items-center justify-content-center mb-1" style="width: 60px; height: 60px;">
            📋
        </div>
        <div style="font-size: 0.75rem;">Todos</div>
    </div>
</div>

<!-- Campo de busca -->
<input type="text" class="form-control mb-3" placeholder="🔍 Buscar por nome..."
       @oninput="BuscarPorNome" />

<!-- Lista de produtos -->
@if (produtosFiltrados.Any())
{
    <div class="row">
        @foreach (var produto in ProdutosDisponiveisHoje)
        {
            <div class="col-6 col-md-4 mb-3">
                <div class="card h-100 shadow-sm" style="font-size: 0.9rem;">
                    <div class="card-body text-center p-2">
                        <img src="@produto.CaminhoImagem" class="img-fluid mb-1" style="max-height: 50px; object-fit: contain;" />
                        <div class="fw-bold text-truncate" style="font-size: 0.85rem;" title="@produto.Nome">
                            @produto.Nome
                        </div>
                        <div class="text-success mb-1">R$ @produto.Preco.ToString("0.00")</div>
                        <button class="btn btn-sm btn-outline-success" @onclick="() => AdicionarAoCarrinho(produto)">Adicionar</button>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <p class="text-muted text-center">Nenhum produto encontrado.</p>
}


    <!-- Carrinho fixo no rodapé -->
<div class="carrinho-footer bg-success text-white text-center p-3" @onclick="ToggleCarrinho">
    🛒 Carrinho (@carrinho.Sum(c => c.Quantidade) itens)
</div>

<!-- Carrinho expandido -->
@if (carrinhoAberto)
{
    <div class="carrinho-expandido shadow-lg p-3 bg-white">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">🛒 Meu Carrinho</h5>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleCarrinho">Fechar</button>
        </div>

        @if (!carrinho.Any())
        {
            <p>Seu carrinho está vazio.</p>
        }
        else
        {
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th></th>
                        <th>Produto</th>
                        <th>Qtd</th>
                        <th>Preço</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in carrinho)
                    {
                        <tr>
                            <td>
                                <div class="d-flex flex-column align-items-center">
                                    <img src="@item.Produto.CaminhoImagem" class="img-fluid mb-1" style="max-height: 40px; object-fit: contain;" />
                                </div>
                            </td>  
                            <td>@item.Produto.Nome</td>
                            <td>
                                <div class="d-flex flex-column align-items-center">
                                    <button class="btn btn-sm btn-light mb-1" @onclick="() => Incrementar(item)">+</button>
                                    <span>@item.Quantidade</span>
                                    <button class="btn btn-sm btn-light mt-1" @onclick="() => Decrementar(item)">-</button>
                                </div>
                            </td>
                            <td>R$ @item.Produto.Preco</td>
                            <td><button class="btn btn-sm btn-danger" @onclick="() => Remover(item)">🗑</button></td>
                        </tr>
                    }
                </tbody>
            </table>

<!-- Forma de pagamento -->
<div class="mb-3">
    <label>Forma de pagamento</label>
    <select class="form-select" @bind="formaPagamento">
        <option value="">Selecione a Forma de Pagamento</option>
        <option value="Dinheiro">Dinheiro</option>
        <option value="Credito">Crédito</option>
        <option value="Debito">Débito</option>
        <option value="Pix">Pix</option>
    </select>
</div>

@if (formaPagamento == "Dinheiro")
{
    <div class="mb-3">
        <label>Troco Para:</label>
        <InputNumber @bind-Value="trocoPara" class="form-control" />
    </div>
}

<div class="mb-3">
    <label class="form-label">Tipo de pedido</label>

    <div class="form-check">
        <input class="form-check-input"
               type="radio"
               id="entrega"
               name="tipoPedido"
               value="entrega"
               checked="@(!retiradaNoLocal)"
               @onchange="() => retiradaNoLocal = false" />
        <label class="form-check-label" for="entrega">Entrega</label>
    </div>

    <div class="form-check">
        <input class="form-check-input"
               type="radio"
               id="retirada"
               name="tipoPedido"
               value="retirada"
               checked="@(retiradaNoLocal)"
               @onchange="() => retiradaNoLocal = true" />
        <label class="form-check-label" for="retirada">Retirada no local</label>
    </div>
</div>





@if (!retiradaNoLocal)
{
    <!-- CEP -->
    <div class="mb-3">
        <label>CEP</label>
        <input class="form-control" @bind="cep" @onblur="BuscarEndereco" maxlength="9" placeholder="Digite o CEP" />
    </div>

    <!-- Endereço retornado pelo ViaCEP (sem número) -->
<div class="mb-3">
    <label>Endereço</label>
    <input class="form-control"
           value="@enderecoBase"
           readonly
           placeholder="Endereço será preenchido automaticamente" />
</div>

<!-- Número da casa -->
<div class="mb-3">
    <label>Número</label>
    <input class="form-control"
           @bind="numeroCasa"
           placeholder="Número da casa, apartamento etc." />
</div>

<button class="btn btn-primary mb-3" @onclick="CalcularFreteAsync">Calcular Frete</button>
@if (resultadoDistancia != null)
{
    <p><strong>Duração estimada:</strong> @resultadoDistancia.Duracao</p>
    <p><strong>Frete:</strong> R$ @valorFrete.ToString("F2")</p>
}
}
<!-- Nome -->
<div class="mb-3">
    <label>Nome</label>
    <input class="form-control" @bind="nome" @oninput="@(() => Validator.NomeErro = "")"/>
    @if (!string.IsNullOrEmpty(Validator.NomeErro))
    {
        <div class="text-danger">@Validator.NomeErro</div>
    }
</div>

<!-- Telefone -->
<div class="mb-3">
    <label>Telefone</label>
    <input class="form-control" @bind="telefone" @oninput="@(() => Validator.TelefoneErro = "")"/>
    @if (!string.IsNullOrEmpty(Validator.TelefoneErro))
    {
        <div class="text-danger">@Validator.TelefoneErro</div>
    }
</div>

<label>Aproveite e inclua:</label>
 <!-- Barra de produtos mais vendidos rolavel -->
<div class="d-flex overflow-auto mb-3 gap-3 px-2 py-1 border-bottom" style="white-space: nowrap;">
    @foreach (var produto in produtosMaisVendidos)
    {
        <div class="text-center flex-shrink-0" style="width: 80px; cursor: pointer;" @onclick="() => AdicionarAoCarrinho(produto)">
            <img src="@produto.CaminhoImagem" class="rounded-circle mb-1" style="width: 60px; height: 60px; object-fit: cover;" />
            <div style="font-size: 0.75rem; white-space: normal;">@produto.Nome</div>
            <div style="font-size: 0.75rem; white-space: normal;">@produto.Preco</div>
        </div>
    }

  
</div>

<h4 class="text-end">Total: R$ @carrinho.Sum(i => i.Produto.Preco * i.Quantidade)</h4>
<h5 class="text-end">Total com frete: R$ @valorTotal.ToString("F2")</h5>

<button class="btn btn-success w-100"
        @onclick="EnviarPedido"
        disabled="@(!carrinho.Any() || string.IsNullOrEmpty(formaPagamento) || isProcessing ||
    (formaPagamento == "Dinheiro" && trocoPara < carrinho.Sum(p => p.Produto.Preco * p.Quantidade)) ||
    (!retiradaNoLocal && string.IsNullOrWhiteSpace(endereco)))"
">
    Finalizar Pedido
</button>

        }
    </div>
}



    @code {
    private List<CarrinhoCompraItem> carrinho = new();
    private string mensagem;
    private bool carrinhoAberto = false;
    private string formaPagamento = "";
    private string endereco = "";
    private string nome = "";
    private string telefone = "";
    private bool isProcessing = false;
    private List<Categoria> categorias = new();
    private List<Produto> todosProdutos = new();
    private List<Produto> produtosFiltrados = new();
    private List<Produto> produtosMaisVendidos = new();
    private List<Produto> ProdutosDisponiveisHoje => produtosFiltrados.Where(produto =>
    string.Equals(produto.DiasDisponiveis, "Todos", StringComparison.OrdinalIgnoreCase) ||
    produto.DiasDisponiveis?
        .Split(',', StringSplitOptions.RemoveEmptyEntries)
        .Select(d => Enum.Parse<DayOfWeek>(d.Trim()))
        .Contains(DateTime.Today.DayOfWeek) == true
).ToList();
    private string cep = "";
    private int? categoriaSelecionadaId = null;
    private string filtroNome = string.Empty;
    private decimal trocoPara = 0;
    private bool retiradaNoLocal = false;
    private string EnderecoSelecionado;
    private DotNetObjectReference<CardapioPage>? objRef;
    private string numeroCasa = "";
    private string enderecoBase = ""; // ViaCEP retorna isso
    DistanciaResult? resultadoDistancia = new();
    decimal valorFrete = 0;
    decimal valorTotal = 0;

    protected override async Task OnInitializedAsync()
    {
        var (catResult, catError) = await _apiService.GetCategorias();
        var (prodResult, prodError) = await _apiService.GetTodosProdutos();
        var (maisVendidosResult, maisVendidosError) = await _apiService.GetProdutosMaisVendidos();

        if (catResult != null) categorias = catResult;
        if (prodResult != null) todosProdutos = prodResult;
        if (maisVendidosResult != null) produtosMaisVendidos = maisVendidosResult;

        AplicarFiltros();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initGoogleAutocomplete", "autocompleteEndereco", objRef);
        }
    }

    [JSInvokable]
    public void OnPlaceSelected(string endereco)
    {
        EnderecoSelecionado = endereco;
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private async Task CalcularFreteAsync()
    {
        endereco = $"{enderecoBase}, {numeroCasa}";

        var origem = "Av. Mário Trevenzoli, 1375, Campinas - SP";
        var destino = endereco;

        var (resultDistancia, errorMessage) = await _apiService.CalcularDistanciaAsync(origem, destino);

        if (resultDistancia != null)
        {
            var distanciaTexto = resultDistancia.Distancia.Replace(" km", "").Replace(",", ".").Trim();

            resultadoDistancia.Distancia = resultDistancia.Distancia;
            resultadoDistancia.Duracao = resultDistancia.Duracao;

            if (decimal.TryParse(distanciaTexto, out var distanciaKm))
            {
                valorFrete = CalcularValorFretePorKm(distanciaKm);
                
            }
            
    }

    CalcularTotalPedido();
}

private decimal CalcularValorFretePorKm(decimal km)
{
    if (km <= 1) return 3;
    else if (km <= 2) return 5;
    else if (km <= 3) return 8;
    else return 12 + (km - 5) * 1.5m;
}

private void CalcularTotalPedido()
{
   valorTotal = carrinho.Sum(p => p.Produto.Preco * p.Quantidade) + valorFrete;
}


//    private void AtualizarEnderecoCompleto(ChangeEventArgs? e = null)
// {
//     endereco = string.IsNullOrWhiteSpace(numeroCasa)
//         ? enderecoBase
//         : $"{enderecoBase}, {numeroCasa}";
// }

private async Task BuscarEndereco()
{
    if (string.IsNullOrWhiteSpace(cep) || cep.Length < 8)
        return;

    try
    {
        var url = $"https://viacep.com.br/ws/{cep.Replace("-", "").Trim()}/json/";
        var enderecoCep = await Http.GetFromJsonAsync<EnderecoViaCep>(url);

        if (enderecoCep != null && enderecoCep.erro != "true")
        {
            enderecoBase = $"{enderecoCep.logradouro}, {enderecoCep.bairro} - {enderecoCep.localidade}/{enderecoCep.uf}";
            // AtualizarEnderecoCompleto();
        }
        else
        {
            await ShowAlert("CEP inválido ou não encontrado.");
        }
    }
    catch (Exception ex)
    {
        await ShowAlert($"Erro ao buscar CEP: {ex.Message}");
    }
}

private async void OnCepDigitado(ChangeEventArgs e)
{
    cep = e?.Value?.ToString() ?? "";
    if (cep.Replace("-", "").Length == 8)
    {
        await BuscarEndereco();
    }
}

    private async void ToggleCarrinho()
    {
        carrinhoAberto = !carrinhoAberto;
    }

    private void AdicionarAoCarrinho(Produto produto)
    {
        var existente = carrinho.FirstOrDefault(p => p.Produto.Id == produto.Id);
        if (existente != null)
        {
            existente.Quantidade++;
        }
        else
        {
            carrinho.Add(new CarrinhoCompraItem { Produto = produto, Quantidade = 1 });
        }
    }

    private void Incrementar(CarrinhoCompraItem item) => item.Quantidade++;
    private void Decrementar(CarrinhoCompraItem item)
    {
        item.Quantidade--;
        if (item.Quantidade <= 0)
            carrinho.Remove(item);
    }

    private void Remover(CarrinhoCompraItem item) => carrinho.Remove(item);

    private async Task EnviarPedido()
    {
        if (isProcessing)
            return;

        isProcessing = true;

        if (formaPagamento == "Dinheiro" && trocoPara < carrinho.Sum(i => i.Produto.Preco * i.Quantidade))
        {
            ShowAlert("O valor do troco deve ser maior ou igual ao total do pedido.");
            isProcessing = false;
            return;
        }

        var enderecoFinal = retiradaNoLocal ? "Retirada no local" : endereco;
        var isValido = await Validator.ValidarCliente(nome, telefone, enderecoFinal);


        if (!isValido)
        {
            ShowAlert("Por favor, corrija os erros antes de continuar.");
            isProcessing = false;
            return;
        }

        if (!carrinho.Any())
        {
            ShowAlert("Seu carrinho está vazio.");
            isProcessing = false;
            return;
        }

        var (existeCliente, errorMessage) = await _apiService.GetClienteByPhoneAsync(telefone);
        if (existeCliente == null)
        {
            var novoCliente = new Clientes
        {
            Nome = nome,
            Telefone = telefone,
            Endereco = enderecoFinal
        };
        var respondeCliente = await _apiService.AddClienteAsync(novoCliente);
        }

        var preComanda = carrinho
                        .Select(i => new CarrinhoCompraItem
                        {
                            Preco = i.Produto.Preco,
                            ProdutoId = i.Produto.Id,
                            ProdutoNome = i.Produto.Nome,
                            UrlImagem = i.Produto.CaminhoImagem,
                            Quantidade = i.Quantidade,
                            ValorTotal = i.Produto.Preco * i.Quantidade
                        })
                        .ToList();

        var comanda = new Comanda
        {
            DataAbertura = DateTime.Now,
            Nome = nome,
            Telefone = telefone,
            Endereco = enderecoFinal,
            ValorTotal = carrinho.Sum(i => i.Produto.Preco * i.Quantidade),
            FormaPagamento = formaPagamento,
            Status = "Aguardando Impressao",
            ValorRecebido = trocoPara,
            Itens = preComanda.Select(i => new ItemComanda
            {
                Nome = nome,
                ProdutoId = i.ProdutoId,
                NomeProduto = i.ProdutoNome,
                PrecoUnitario = i.Preco,
                Quantidade = i.Quantidade,
                UrlImagem = i.UrlImagem
            }).ToList()
        };


        var responseComanda = await _apiService.CriarComanda(comanda);
   
        if (responseComanda.Data != null)
        {
           ShowAlert("Pedido enviado com sucesso!");
            carrinho.Clear();
            nome = "";
            endereco = "";
            telefone = "";
            formaPagamento = "";
            StateHasChanged(); // Atualiza a UI
        }
        else
        
        {
            ShowAlert("Erro ao enviar pedido.");
        }
         isProcessing = false;

    }

    private void SelecionarCategoria(int? categoriaId)
{
    categoriaSelecionadaId = categoriaId;
    AplicarFiltros();
}

private void FiltrarProdutosPorNome(ChangeEventArgs e)
{
    filtroNome = e?.Value?.ToString() ?? string.Empty;
    AplicarFiltros();
}

private void BuscarPorNome(ChangeEventArgs e)
{
    filtroNome = e.Value?.ToString() ?? string.Empty;
    AplicarFiltros();
}

private void AplicarFiltros()
{
    if (!categoriaSelecionadaId.HasValue && string.IsNullOrWhiteSpace(filtroNome))
    {
        // Exibe os produtos mais populares por padrão (ex: top 10 mais vendidos ou aleatórios)
        produtosFiltrados = todosProdutos
            .OrderByDescending(p => p.Popular) // ou outro critério
            .Take(10)
            .ToList();
    }
    else
    {
        produtosFiltrados = todosProdutos
            .Where(p =>
                (!categoriaSelecionadaId.HasValue || p.CategoriaId == categoriaSelecionadaId.Value) &&
                (string.IsNullOrWhiteSpace(filtroNome) || p.Nome.Contains(filtroNome, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }
}



    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}


}