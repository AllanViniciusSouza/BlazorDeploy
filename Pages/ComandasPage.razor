@page "/comandas"
@inject AuthService AuthService
@inject ApiService _apiService
@inject IJSRuntime JS

@inject NavigationManager Navigation

<PageTitle>Comandas</PageTitle>

@if (!ComandasAbertas.Any())
{
    <p>Nenhuma comanda encontrada</p>
}
else
{
    <h3 class="d-flex justify-content-center text-decoration-underline">Comandas Abertas</h3>

    <div class="mb-3">
        <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Buscar comanda pelo número..." class="form-control mb-4" />
    </div>

    <div class="alert alert-primary text-center fw-bold fs-5">
        Valor total das comandas abertas: R$ @ComandasAbertas.Sum(c => c.ValorTotal).ToString("N2")
    </div>

    <Accordion>
        @foreach (var comanda in ComandasFiltradas)
        {
            <div class="mb-4 p-3 border rounded shadow-sm"
                 style="background-color: @(comanda.DataAbertura.AddDays(7) < DateTime.Now
                                ? "#dc3545"
                                : comanda.ValorTotal > 100
                                    ? "#f8d7da"
                                    : "#c0c0c0");">
                <AccordionItem>
                    <AccordionHeader>
                        <div class="w-100">
                            <div class="w-100 d-flex justify-content-between align-items-center">
                                <div class="fw-bold fs-5">Comanda <span class="text-decoration-underline">@comanda.Nome</span></div>
                                <div class="text-muted">@comanda.DataAbertura.ToString("dd/MM/yyyy HH:mm")</div>
                            </div>
                            <div class="fw-bold">Valor Total: R$ @comanda.ValorTotal</div>

                        </div>
                    </AccordionHeader>

                    <AccordionBody>
                        <div>
                            <ul class="list-group">
                                @foreach (var item in comanda.Itens)
                                {
                                    <li class="list-group-item d-flex flex-wrap justify-content-between align-items-center">
                                        <div class="fw-bold w-100">@item.NomeProduto</div>

                                        <div class="d-flex align-items-center my-1">
                                            <span class="me-2">R$ @item.PrecoUnitario</span>
                                        </div>

                                        <div class="d-flex align-items-center my-1">
                                            <button class="btn btn-secondary btn-sm" @onclick="() => Decrementar(item, comanda.Nome)">-</button>
                                            <input type="number" class="form-control text-center mx-2" style="width: 60px;" @bind="item.Quantidade" min="1" disabled />
                                            <button class="btn btn-secondary btn-sm" @onclick="() => Incrementar(item, comanda.Nome)">+</button>
                                        </div>

                                        <div class="text-center fw-bold my-1">R$ @item.ValorTotal</div>

                                        <div class="text-end my-1 w-100">
                                            <button class="btn btn-danger btn-sm w-100" @onclick="() => DeletarItem(item, comanda.Nome)">Excluir</button>
                                        </div>
                                    </li>
                                }
                            </ul>

                            <div class="mt-3">
                                <label for="formaPagamento">Forma de Pagamento:</label>
                                <select id="formaPagamento" class="form-select" @bind="comanda.FormaPagamento">
                                    <option value="">Selecione uma forma de pagamento</option>
                                    <option value="Dinheiro">Dinheiro</option>
                                    <option value="Credito">Crédito</option>
                                    <option value="Debito">Débito</option>
                                    <option value="Pix">Pix</option>
                                </select>
                            </div>

                            <div class="mt-3">
                                <label>Valor Final da Comanda:</label>
                                <input type="number" class="form-control" step="1.00" @bind="comanda.ValorTotal" />
                            </div>

                            @if (comanda.FormaPagamento == "Dinheiro")
                            {
                                <div class="mt-3">
                                    <label>Valor Recebido:</label>
                                    <input type="number" class="form-control" step="1.00" @bind="comanda.ValorRecebido" @oninput="(e) => CalcularTroco(comanda)" />
                                </div>
                                <div class="mt-2 fw-bold">
                                    Troco: R$ @(comanda.ValorRecebido - comanda.ValorTotal > 0
                        ? string.Format("{0:N2}", comanda.ValorRecebido - comanda.ValorTotal)
                        : "0,00")
                                </div>
                            }

                            <button class="btn btn-success w-100 mt-3" @onclick="() => FinalizarComanda(comanda)">Finalizar Comanda</button>
                            <button class="btn btn-danger w-100 mt-3" @onclick="() => DeletarComanda(comanda.Nome)">Excluir Comanda</button>
                        </div>
                    </AccordionBody>
                </AccordionItem>
            </div>

        }
    </Accordion>
}


@code {
    private List<Comanda> ComandasAbertas = new List<Comanda>();
    private List<Comanda> ComandasFiltradas => ComandasAbertas
        .Where(c => string.IsNullOrEmpty(searchTerm) || c.Nome.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        // var nome = await JS.InvokeAsync<string>("sessionStorage.getItem", "Email");

        // if (string.IsNullOrEmpty(nome))
        // {
        //     Navigation.NavigateTo("/login");
        // }

        var (comandasAbertas, errorMessage) = await _apiService.GetComandas();
        if (comandasAbertas is null) return;

        foreach (var comanda in comandasAbertas)
        {
            comanda.Itens = await GetItensComanda(comanda.Nome);
            comanda.ValorTotal = comanda.Itens.Sum(item => item.PrecoUnitario * item.Quantidade);
            await _apiService.AtualizarComanda(comanda);
        }
        ComandasAbertas = comandasAbertas;

    }

    private async Task DeletarComanda(string nome)
    {
        bool confirmacao = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja apagar a comanda?");
        if (confirmacao)
        {
            var itensNaComanda = await GetItensComanda(nome);
            if (itensNaComanda != null)
            {
                foreach (var item in itensNaComanda)
                {
                    await EntradaNoEstoque(item);
                }
            }
            bool sucesso = await _apiService.DeletarComanda(nome);
            if (sucesso)
            {
                ComandasAbertas.RemoveAll(c => c.Nome == nome);
            }
            else
            {
                await ShowAlert("Erro ao excluir a comanda.");
            }
        }
    }

    private async Task FinalizarComanda(Comanda comanda)
    {
        if (string.IsNullOrEmpty(comanda.FormaPagamento))
        {
            await ShowAlert("Por favor, selecione uma forma de pagamento.");
            return;
        }

        var dto = new ComandasDTO
        {
            Id = comanda.Id,
            Nome = comanda.Nome,
            Telefone = comanda.Telefone,
            DataAbertura = comanda.DataAbertura,
            UsuarioId = comanda.UsuarioId,
            ClienteId = comanda.ClienteId,
            
            ValorTotal = comanda.ValorTotal,
            ValorRecebido = comanda.ValorRecebido,
            FormaPagamento = comanda.FormaPagamento,
            Itens = comanda.Itens.Select(i => new ItemComandaDTO
            {
                Id = i.Id,
                Nome = i.Nome,
                ProdutoId = i.ProdutoId,
                NomeProduto = i.NomeProduto,
                Quantidade = i.Quantidade,
                PrecoUnitario = i.PrecoUnitario
            }).ToList()
        };

        var sucesso = await _apiService.ConfirmarComanda(dto);

        if (sucesso.Data)
        {
            await ShowAlert("Comanda finalizada com sucesso.");
            // Remove a comanda finalizada da lista
            ComandasAbertas.RemoveAll(c => c.Id == comanda.Id);
        }
        else
        {
            await ShowAlert("Erro ao finalizar a comanda.");
        }
        StateHasChanged(); // Atualiza a UI
    }

    private async Task Decrementar(ItemComanda itemComanda, string nome)
    {
        if (itemComanda.Quantidade == 1) return;

        itemComanda.Quantidade--;
        await _apiService.AtualizaQuantidadeItemComanda(itemComanda.ProdutoId, "diminuir", nome);
        await AtualizaPrecoTotal(nome);
        await EntradaNoEstoque(itemComanda);
        await Task.Delay(100);
        StateHasChanged(); // Atualiza a UI
    }

    private async Task Incrementar(ItemComanda itemComanda, string nome)
    {
        itemComanda.Quantidade++;
        await _apiService.AtualizaQuantidadeItemComanda(itemComanda.ProdutoId, "aumentar", nome);
        await AtualizaPrecoTotal(nome);
        await SaidaDoEstoque(itemComanda);
        await Task.Delay(100);
        StateHasChanged(); // Atualiza a UI
    }

    private async Task DeletarItem(ItemComanda item, string nome)
    {
        bool confirmacao = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este item da comanda?");
        if (confirmacao)
        {
            var sucesso = await _apiService.AtualizaQuantidadeItemComanda(item.ProdutoId, "deletar", nome);
            if (sucesso.Data)
            {
                var comanda = ComandasAbertas.FirstOrDefault(c => c.Nome == nome);
                if (comanda != null)
                {
                    comanda.Itens.Remove(item);
                    await AtualizaPrecoTotal(nome);
                    await EntradaNoEstoque(item);
                }
            }
            else
            {
                await ShowAlert("Erro ao excluir o item.");
            }
        }

    }

    private async Task<List<ItemComanda>> GetItensComanda(string nome)
    {
        var (itensComanda, errorMessage) = await _apiService.GetItensComanda(nome);
        return itensComanda ?? new List<ItemComanda>();
    }

    private async Task AtualizaPrecoTotal(string nome)
    {
        var comanda = ComandasAbertas.FirstOrDefault(c => c.Nome == nome);
        if (comanda != null)
        {
            comanda.ValorTotal = comanda.Itens.Sum(item => item.PrecoUnitario * item.Quantidade);
            await _apiService.AtualizarComanda(comanda);
        }
    }

    private async Task EntradaNoEstoque(ItemComanda item)
    {
        var movimentacao = new MovimentacaoEstoque()
            {
                ProdutoId = item.ProdutoId,
                Tipo = TipoMovimentacao.Compra,
                Quantidade = 1,
                DataMovimentacao = DateTime.Now
            };
        var responseMovimetacao = await _apiService.MovimentarEstoqueAsync(movimentacao);
        if (responseMovimetacao.Data)
        {
            // await ShowAlert("Item adicionado na comanda !");
        }
        else
        {
            await ShowAlert($"Falha ao movimentar estoque: {responseMovimetacao.ErrorMessage}");
        }
    }

    private async Task SaidaDoEstoque(ItemComanda item)
    {
        var movimentacao = new MovimentacaoEstoque()
            {
                ProdutoId = item.ProdutoId,
                Tipo = TipoMovimentacao.Venda,
                Quantidade = 1,
                DataMovimentacao = DateTime.Now
            };
        var responseMovimetacao = await _apiService.MovimentarEstoqueAsync(movimentacao);
        if (responseMovimetacao.Data)
        {
            // await ShowAlert("Item adicionado na comanda !");
        }
        else
        {
            await ShowAlert($"Falha ao movimentar estoque: {responseMovimetacao.ErrorMessage}");
        }
    }

    private void CalcularTroco(Comanda comanda)
    {
        var troco = comanda.ValorRecebido - comanda.ValorTotal;
        if (troco < 0) troco = 0;
        // Pode armazenar se quiser em outra propriedade
    }


    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}

