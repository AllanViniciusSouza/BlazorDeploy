@page "/produtos"
@inject ApiService _apiService
@inject AuthService AuthService
@* @inject IJSRuntime JS *@
@inject NavigationManager Navigation
@* @inject AuthService AuthService *@

<PageTitle>Lista de Produtos</PageTitle>

<button class="btn btn-primary" @onclick="MostrarFormulario">Adicionar Novo Produto</button>

@if (exibirFormulario)
{
    <EditForm Model="novoProduto" OnValidSubmit="AdicionarProduto">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label for="nome">Nome:</label>
            <InputText id="nome" class="form-control" @bind-Value="novoProduto.Nome" />
            <ValidationMessage For="@(() => novoProduto.Nome)" />
        </div>
        <div class="form-group">
            <label for="preco">Preço:</label>
            <InputNumber id="preco" class="form-control" @bind-Value="novoProduto.Preco" />
            <ValidationMessage For="@(() => novoProduto.Preco)" />
        </div>
        <div class="form-group form-check">
            <InputCheckbox id="popular" class="form-check-input" @bind-Value="novoProduto.Popular" />
            <label class="form-check-label" for="popular">Popular</label>
        </div>

        <div class="form-group">
            <label for="categoria">Categoria:</label>
            <InputSelect id="categoria" class="form-control" @bind-Value="novoProduto.CategoriaId">
                <option value="">Selecione...</option>
                @foreach (var cat in categorias)
                {
                    <option value="@cat.Id">@cat.Nome</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="barcode">Barcode:</label>
            <InputText id="barcode" class="form-control" @bind-Value="novoProduto.Barcode" />
            <ValidationMessage For="@(() => novoProduto.Barcode)" />
        </div>

        <div class="form-group">
            <label>Dias Disponíveis:</label>
            <div class="d-flex flex-wrap gap-2">
                @foreach (var dia in diasSemana)
                {
                    <div class="form-check me-2">
                        <input type="checkbox"
                               class="form-check-input"
                               checked="@diasSelecionadosNovoProduto.Contains(dia)"
                               @onchange="@((ChangeEventArgs e) => OnDiaSelecionadoNovoProduto(dia, (bool)e.Value))" />
                        <label class="form-check-label">@dia</label>
                    </div>
                }
            </div>
        </div>

        <button type="submit" class="btn btn-success">Salvar</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    </EditForm>
}

<div class="row">
    <div class="col-md-6">
        <label for="searchNome" class="form-label fw-bold">Pesquisar por Nome</label>
        <input type="text" id="searchNome" class="form-control" @bind="searchNome" @oninput="SearchByNome" placeholder="Digite o nome do produto" />
    </div>

    <div class="col-md-6">
        <label for="searchBarcode" class="form-label fw-bold">Pesquisar por Código de Barras</label>
        <input type="text" id="searchBarcode" class="form-control" @bind="searchBarcode" @oninput="SearchByBarcode" placeholder="Digite o código de barras" />
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Imagem</th>
            <th>Nome</th>
            <th>Preço</th>
            <th>Dias Disponíveis</th>
            <th>Disponivel no cardápio</th>
            <th>Popular</th>
            <th>Categoria</th>
            <th>Barcode</th>
            @* <th>Ações</th> *@
        </tr>
    </thead>
    <tbody>
        @foreach (var produto in filteredProdutos)
        {
            <tr>
                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                    <img src="@produto.CaminhoImagem"
             @onclick="() => ClickInput(produto.Id)"
             style="width:100px; cursor:pointer" />

        <!-- Campo de arquivo oculto -->
        <InputFile id=@($"fileInput-{produto.Id}")
           style="display:none"
           accept="image/*"
           capture="environment"
           OnChange="@(e => OnFotoSelecionada(e, produto.Id))" />
                    }
                     else
                    {
                    <img src="@produto.CaminhoImagem" alt="Imagem do Produto" width="40" style="cursor: pointer;" />
    }
                </td>

                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                        <InputText class="form-control" @bind-Value="produto.Nome" />
                    }
                    else
                    {
                        @produto.Nome
                    }
                </td>
                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                        <InputNumber class="form-control" @bind-Value="produto.Preco" />
                    }
                    else
                    {
                        @produto.Preco.ToString("C2")
                    }
                </td>
               <td>
    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
    {
            // Obtém os dias selecionados para o produto atual do dicionário
            List<DayOfWeek> diasProduto = diasSelecionadosPorProduto.ContainsKey(produto.Id)
                ? diasSelecionadosPorProduto[produto.Id]
                : (
                    string.Equals(produto.DiasDisponiveis, "Todos", StringComparison.OrdinalIgnoreCase)
                        ? Enum.GetValues<DayOfWeek>().ToList()
                        : produto.DiasDisponiveis?
                            .Split(',', StringSplitOptions.RemoveEmptyEntries)
                            .Select(d => Enum.TryParse<DayOfWeek>(d.Trim(), out var result) ? result : DayOfWeek.Sunday) // fallback seguro
                            .ToList() ?? new List<DayOfWeek>()
                );

        @foreach (var dia in diasSemana)
        {
            <div class="form-check form-check-inline">
                <input type="checkbox"
                       class="form-check-input"
                       checked="@diasProduto.Contains(dia)"
                       @onchange="@((ChangeEventArgs e) => OnDiaSelecionado(produto, dia, (bool)e.Value))" />
                <label class="form-check-label">@dia</label>
            </div>
        }
    }
    else
    {
        <span>@produto.DiasDisponiveis</span>
    }
</td>

                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                        <InputCheckbox @bind-Value="produto.Popular" class="form-check-input" />
                    }
                    else
                    {
                        @if (produto.Popular)
                        {
                            <span class="badge bg-success">Sim</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Não</span>
                        }
                    }
                </td>

                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                        <InputCheckbox @bind-Value="produto.Disponivel" class="form-check-input" />
                    }
                    else
                    {
                        @if (produto.Disponivel)
                        {
                            <span class="badge bg-success">Sim</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">Não</span>
                        }
                    }
                </td>

                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                        <InputSelect class="form-control" @bind-Value="produto.CategoriaId">
                            @foreach (var cat in categorias)
                            {
                                <option value="@cat.Id">@cat.Nome</option>
                            }
                        </InputSelect>
                    }
                    else
                    {
                        @categorias.FirstOrDefault(c => c.Id == produto.CategoriaId)?.Nome
                    }
                </td>

                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                        <InputText class="form-control" @bind-Value="produto.Barcode" />
                    }
                    else
                    {
                        @produto.Barcode
                    }
                </td>
                <td>
                    @if (editandoProdutos.ContainsKey(produto.Id) && editandoProdutos[produto.Id])
                    {
                        <button class="btn btn-success btn-sm" @onclick="() => SalvarEdicao(produto)">Salvar</button>
                        <button class="btn btn-secondary btn-sm" @onclick="() => CancelarEdicao(produto.Id)">Cancelar</button>
                    }
                    else
                    {
                        <button class="btn btn-primary btn-sm" @onclick="() => EditarProduto(produto.Id)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ExcluirProduto(produto.Id)">Excluir</button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    // private List<Produto> produtos;
    private string searchNome = string.Empty;
    private string searchBarcode = string.Empty;
    private List<Produto> filteredProdutos = new();
    private Produto novoProduto = new Produto();
    private bool exibirFormulario = false;
    private Dictionary<int, bool> editandoProdutos = new();
    private List<Categoria> categorias = new();
    private List<DayOfWeek> diasSemana = Enum.GetValues<DayOfWeek>().ToList();
    private Dictionary<int, List<DayOfWeek>> diasSelecionadosPorProduto = new();
    private List<DayOfWeek> diasSelecionadosNovoProduto = new();
    [Inject] IJSRuntime JS { get; set; }



    protected override async Task OnInitializedAsync()
    {
        var nome = await JS.InvokeAsync<string>("sessionStorage.getItem", "Email");

        if (string.IsNullOrEmpty(nome))
        {
            Navigation.NavigateTo("login");
        }

        var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
        filteredProdutos = todosProdutos;

        var (todasCategorias, erroCategorias) = await _apiService.GetCategorias(); // ou seu método real
        categorias = todasCategorias;
    }

    private void MostrarFormulario()
    {
        novoProduto = new Produto();
        exibirFormulario = true;
    }

    private async Task ClickInput(int produtoId)
    {
        await JS.InvokeVoidAsync("triggerFileInput", $"fileInput-{produtoId}");
    }

    private async Task OnFotoSelecionada(InputFileChangeEventArgs  e, int produtoId)
    {
        var arquivo = e.File;

    using var stream = arquivo.OpenReadStream(5 * 1024 * 1024); // até 5MB
    await _apiService.EnviarFotoProdutoAsync(produtoId, stream, arquivo.ContentType);

    var novaImagem = $"/produto_{produtoId}.jpg?{DateTime.Now.Ticks}"; // força recarregar a imagem

    var produto = filteredProdutos.FirstOrDefault(p => p.Id == produtoId);
    if (produto != null)
        produto.UrlImagem = novaImagem;
    }

    private async Task AdicionarProduto()
    {
        // Monta a string DiasDisponiveis
        if (diasSelecionadosNovoProduto.Count == 7)
            novoProduto.DiasDisponiveis = "Todos";
        else
            novoProduto.DiasDisponiveis = string.Join(",", diasSelecionadosNovoProduto);
        // Adicionar o novo produto ao serviço ou API
        await _apiService.AdicionarProdutoAsync(novoProduto);
        var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
        filteredProdutos = todosProdutos;
        exibirFormulario = false;
        diasSelecionadosNovoProduto.Clear();
    }

    void OnDiaSelecionado(Produto produto, DayOfWeek dia, bool selecionado)
    {
        if (!diasSelecionadosPorProduto.ContainsKey(produto.Id))
        {
            diasSelecionadosPorProduto[produto.Id] = string.Equals(produto.DiasDisponiveis, "Todos", StringComparison.OrdinalIgnoreCase)
                ? Enum.GetValues<DayOfWeek>().ToList()
                : produto.DiasDisponiveis?
                    .Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(d => Enum.Parse<DayOfWeek>(d.Trim()))
                    .ToList() ?? new List<DayOfWeek>();
        }

        var dias = diasSelecionadosPorProduto[produto.Id];

        if (selecionado && !dias.Contains(dia))
            dias.Add(dia);
        else if (!selecionado && dias.Contains(dia))
            dias.Remove(dia);

        produto.DiasDisponiveis = dias.Count == 7
            ? "Todos"
            : string.Join(",", dias.Select(d => d.ToString()));
    }



    private void Cancelar()
    {
        exibirFormulario = false;
    }

    private async Task SearchByNome(ChangeEventArgs e)
    {
        searchBarcode = string.Empty; // Limpa a pesquisa por código de barras
        searchNome = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(searchNome))
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos;
        }
        else
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos
                                .Where(c => c.Nome.IndexOf(searchNome, StringComparison.OrdinalIgnoreCase) >= 0)
                                .ToList();
        }
    }

    private async Task SearchByBarcode(ChangeEventArgs e)
    {
        searchNome = string.Empty; // Limpa a pesquisa por nome
        searchBarcode = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(searchBarcode))
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos;
        }
        else
        {
            var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
            filteredProdutos = todosProdutos
                                .Where(c => c.Barcode == searchBarcode)
                                .ToList();
        }
    }

    private async Task ExcluirProduto(int idProduto)
    {
        bool confirmacao = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este produto?");
        if (confirmacao)
        {
            bool sucesso = await _apiService.ExcluirProdutoAsync(idProduto);
            if (sucesso)
            {
                var (todosProdutos, errorMessage) = await _apiService.GetTodosProdutos();
                filteredProdutos = todosProdutos;
                StateHasChanged();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Erro ao excluir o produto.");
            }
        }
    }

    private void EditarProduto(int idProduto)
    {
        editandoProdutos[idProduto] = true;
    }

    private async Task SalvarEdicao(Produto produto)
    {
        bool sucesso = await _apiService.AtualizarProduto(produto.Id, produto);
        if (sucesso)
        {
            editandoProdutos[produto.Id] = false;
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Erro ao atualizar o produto.");
        }
    }

    void OnDiaSelecionadoNovoProduto(DayOfWeek dia, bool selecionado)
    {
        if (selecionado)
        {
            if (!diasSelecionadosNovoProduto.Contains(dia))
                diasSelecionadosNovoProduto.Add(dia);
        }
        else
        {
            diasSelecionadosNovoProduto.Remove(dia);
        }
    }


    private void CancelarEdicao(int idProduto)
    {
        editandoProdutos[idProduto] = false;
    }
}
