@page "/cardapio"
@layout CardapioLayout
@inject ApiService _apiService

<h3 class="text-center mb-4">🍽️ Cardápio</h3>

@if (produtos == null)
{
    <p>Carregando...</p>
}
else
{
    @foreach (var categoria in produtos.GroupBy(p => p.CategoriaId))
    {
        <h4 class="text-primary mt-4">@categoria.Key</h4>
        <div class="row">
            @foreach (var item in categoria)
            {
                <div class="col-md-4 mb-3">
                    <div class="card h-100 shadow">
                        <div class="card-body text-center">
                            <img src="@item.CaminhoImagem" alt="Imagem" class="img-fluid mb-2" style="max-height: 100px;" />
                            <h5>@item.Nome</h5>
                            <p class="text-success"><strong>R$ @item.Preco</strong></p>
                            <button class="btn btn-outline-success" @onclick="() => AdicionarAoCarrinho(item)">Adicionar</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Carrinho fixo no rodapé -->
<div class="carrinho-footer bg-success text-white text-center p-3" @onclick="ToggleCarrinho">
    🛒 Carrinho (@carrinho.Sum(c => c.Quantidade) itens)
</div>

<!-- Carrinho expandido -->
@if (carrinhoAberto)
{
    <div class="carrinho-expandido shadow-lg p-3 bg-white">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">🛒 Meu Carrinho</h5>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleCarrinho">Fechar</button>
        </div>

        @if (!carrinho.Any())
        {
            <p>Seu carrinho está vazio.</p>
        }
        else
        {
            <table class="table table-sm">
                <thead>
                    <tr>
                        <th>Produto</th>
                        <th>Qtd</th>
                        <th>Preço</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in carrinho)
                    {
                        <tr>
                            <td>@item.Produto.Nome</td>
                            <td>
                                <button class="btn btn-sm btn-light me-1" @onclick="() => Decrementar(item)">-</button>
                                @item.Quantidade
                                <button class="btn btn-sm btn-light ms-1" @onclick="() => Incrementar(item)">+</button>
                            </td>
                            <td>R$ @item.Produto.Preco</td>
                            <td><button class="btn btn-sm btn-danger" @onclick="() => Remover(item)">🗑</button></td>
                        </tr>
                    }
                </tbody>
            </table>

            <!-- Dados do cliente -->
            <div class="mb-3">
                <label>Forma de pagamento</label>
                <select class="form-select" @bind="formaPagamento">
                    <option>Dinheiro</option>
                    <option>Pix</option>
                    <option>Cartão</option>
                </select>
            </div>

            <div class="mb-3">
                <label>Endereço</label>
                <input class="form-control" @bind="endereco" />
            </div>

            <div class="mb-3">
                <label>Telefone</label>
                <input class="form-control" @bind="telefone" />
            </div>

            <h5 class="text-end">Total: R$ @carrinho.Sum(i => i.Produto.Preco * i.Quantidade):F2</h5>

            <button class="btn btn-success w-100" @onclick="EnviarPedido">Finalizar Pedido</button>
        }
    </div>
}



@code {
    private List<Produto> produtos;
    private List<CarrinhoCompraItem> carrinho = new();
    private string mensagem;
    private bool carrinhoAberto = false;
    private string formaPagamento = "Dinheiro";
    private string endereco = "";
    private string telefone = "";

    protected override async Task OnInitializedAsync()
    {
        var (produtosApi, error) = await _apiService.GetTodosProdutos();
        produtos = produtosApi;
    }

    private void ToggleCarrinho()
    {
        carrinhoAberto = !carrinhoAberto;
    }

    private void AdicionarAoCarrinho(Produto produto)
    {
        var existente = carrinho.FirstOrDefault(p => p.Produto.Id == produto.Id);
        if (existente != null)
        {
            existente.Quantidade++;
        }
        else
        {
            carrinho.Add(new CarrinhoCompraItem { Produto = produto, Quantidade = 1 });
        }
    }

    private void Incrementar(CarrinhoCompraItem item) => item.Quantidade++;
    private void Decrementar(CarrinhoCompraItem item)
    {
        item.Quantidade--;
        if (item.Quantidade <= 0)
            carrinho.Remove(item);
    }

    private void Remover(CarrinhoCompraItem item) => carrinho.Remove(item);

    private async Task EnviarPedido()
    {
        if (!carrinho.Any())
        {
            mensagem = "Seu carrinho está vazio.";
            return;
        }

        var pedido = carrinho
     .Select(i => new CarrinhoCompraItem
     {
         Id = i.Produto.Id,
         Quantidade = i.Quantidade
     })
     .ToList();


        var response = await _apiService.OrdemCompra(pedido); // Ajuste conforme sua API

        if (response.Data)
        {
            mensagem = "Pedido enviado com sucesso!";
            carrinho.Clear();
        }
        else
        {
            mensagem = "Erro ao enviar pedido.";
        }
    }
}


}