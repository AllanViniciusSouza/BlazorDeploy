@page "/send-message"
@inject ApiService _apiService
@inject AuthService AuthService
@inject IJSRuntime JS
@inject NavigationManager Navigation

<h3>Enviar Mensagem</h3>

<div>
    <label>Telefone:</label>
    <input @bind="Phone" placeholder="Ex: 199987654321" class="form-control" />
</div>

<div class="mt-2">
    <label>Mensagem:</label>
    <textarea @bind="Message" class="form-control"></textarea>
</div>

<div class="mt-2">
    <button class="btn btn-primary" @onclick="SendMessage" disabled="@IsSending">Enviar</button>
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="mt-2 alert @StatusCss">@StatusMessage</div>
}
}
@code {
    private string Phone = "";
    private string Message = "";
    private string StatusMessage = "";
    private string StatusCss = "";
    private bool IsSending = false;
    private bool isLoading = true;
    private bool isProcessing = false;
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var nome = await JS.InvokeAsync<string>("sessionStorage.getItem", "Email");

        if (string.IsNullOrEmpty(nome))
        {
            Navigation.NavigateTo("/login");
        }
    }
    private async Task SendMessage()
    {
        IsSending = true;
        StatusMessage = "Enviando mensagem...";
        StatusCss = "alert-info";

        // Garante que o número comece com "55"
        string formattedPhone = Phone.StartsWith("55") ? Phone : "55" + Phone;

        var dto = new WhatsappMessageDto
        {
            Phone = formattedPhone,
            Message = Message,
            Session = "cozinha" // Pode ser configurável
        };

        try
        {
            var response = await _apiService.MandarMensagemAsync(dto);

            if (response.Data)
            {
                StatusMessage = "Mensagem enviada com sucesso!";
                StatusCss = "alert-success";
            }
            else
            {
                await ShowAlert("Erro ao enviar mensagem.");
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Falha: {ex.Message}";
            StatusCss = "alert-danger";
        }


        IsSending = false;
    }

    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}
