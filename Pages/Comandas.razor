@page "/comandas"

@inject ApiService _apiService
@inject IJSRuntime JS

@inject NavigationManager Navigation

<PageTitle>Comandas</PageTitle>

@* @if (isLoading)
{
    <p>Verificando autenticação...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecionando para o login...</p>
}
else
{ *@
@if (!ComandasAbertas.Any())
{
    <p>Nenhuma comanda encontrada</p>
}
else
{
    <h3 class="d-flex justify-content-center text-decoration-underline">Comandas Abertas</h3>

    <div class="mb-3">
        <input type="text" @bind="searchTerm" @bind:event="oninput" placeholder="Buscar comanda pelo número..." class="form-control mb-4" />
    </div>

    <Accordion>
        @foreach (var comanda in ComandasFiltradas)
        {
            <div class="mb-4 p-3 border rounded shadow-sm" style="background-color: #c0c0c0;">
                <AccordionItem>
                    <AccordionHeader>
                        <div class="w-100">
                            <div class="fw-bold fs-5">Comanda <span class="text-decoration-underline">@comanda.IdComanda</span></div>
                            <div class="fw-bold">Valor Total: R$ @comanda.ValorTotal</div>
                        </div>
                    </AccordionHeader>

                    <AccordionBody>
                        <div>
                            <ul class="list-group">
                                @foreach (var item in comanda.Itens)
                                {
                                    <li class="list-group-item d-flex flex-wrap justify-content-between align-items-center">
                                        <div class="fw-bold w-100">@item.ProdutoNome</div>

                                        <div class="d-flex align-items-center my-1">
                                            <span class="me-2">R$ @item.PrecoUnitario</span>
                                        </div>

                                        <div class="d-flex align-items-center my-1">
                                            <button class="btn btn-secondary btn-sm" @onclick="() => Decrementar(item, comanda.IdComanda)">-</button>
                                            <input type="number" class="form-control text-center mx-2" style="width: 60px;" @bind="item.Quantidade" min="1" disabled />
                                            <button class="btn btn-secondary btn-sm" @onclick="() => Incrementar(item, comanda.IdComanda)">+</button>
                                        </div>

                                        <div class="text-center fw-bold my-1">R$ @item.ValorTotal</div>

                                        <div class="text-end my-1 w-100">
                                            <button class="btn btn-danger btn-sm w-100" @onclick="() => DeletarItem(item, comanda.IdComanda)">Excluir</button>
                                        </div>
                                    </li>
                                }
                            </ul>

                            <div class="mt-3">
                                <label for="formaPagamento">Forma de Pagamento:</label>
                                <select id="formaPagamento" class="form-select" @bind="comanda.FormaPagamento">
                                    <option value="">Selecione uma forma de pagamento</option>
                                    <option value="Dinheiro">Dinheiro</option>
                                    <option value="CartaoCredito">Cartão de Crédito</option>
                                    <option value="CartaoDebito">Cartão de Débito</option>
                                    <option value="Pix">Pix</option>
                                </select>
                            </div>

                            <div class="mt-3">
                                <label>Valor Final da Comanda:</label>
                                <input type="number" class="form-control" step="1.00" @bind="comanda.ValorTotal" />
                            </div>

                            @if (comanda.FormaPagamento == "Dinheiro")
                            {
                                <div class="mt-3">
                                    <label>Valor Recebido:</label>
                                    <input type="number" class="form-control" step="1.00" @bind="comanda.ValorRecebido" @oninput="(e) => CalcularTroco(comanda)" />
                                </div>
                                <div class="mt-2 fw-bold">
                                    Troco: R$ @(comanda.ValorRecebido - comanda.ValorTotal > 0
                              ? string.Format("{0:N2}", comanda.ValorRecebido - comanda.ValorTotal)
                              : "0,00")
                                </div>
                            }

                            <button class="btn btn-success w-100 mt-3" @onclick="() => FinalizarComanda(comanda)">Finalizar Comanda</button>
                            <button class="btn btn-danger w-100 mt-3" @onclick="() => DeletarComanda(comanda.IdComanda)">Excluir Comanda</button>
                        </div>
                    </AccordionBody>
                </AccordionItem>
            </div>

        }
    </Accordion>
}


@code {
    private List<Comanda> ComandasAbertas = new List<Comanda>();
    private List<Comanda> ComandasFiltradas => ComandasAbertas
        .Where(c => string.IsNullOrEmpty(searchTerm) || c.IdComanda.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        .ToList();
    private string searchTerm = "";
    private bool isAuthenticated = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // isAuthenticated = await AuthService.IsAuthenticated();

        // if (!isAuthenticated)
        // {
        //     Navigation.NavigateTo("/login", forceLoad: true);
        // }

        // isLoading = false;

        var (comandasAbertas, errorMessage) = await _apiService.GetComandas();
        if (comandasAbertas is null) return;
        foreach (var comanda in comandasAbertas)
        {
            comanda.Itens = await GetItensComanda(comanda.IdComanda);
            await AtualizaPrecoTotal(comanda.IdComanda);
        }
        ComandasAbertas = comandasAbertas;
    }

    private async Task DeletarComanda(string idComanda)
    {
        bool confirmacao = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja apagar a comanda?");
        if (confirmacao)
        {
            bool sucesso = await _apiService.DeletarComanda(idComanda);
            if (sucesso)
            {
                ComandasAbertas.RemoveAll(c => c.IdComanda == idComanda);
            }
            else
            {
                await ShowAlert("Erro ao excluir a comanda.");
            }
        }
    }

    private async Task FinalizarComanda(Comanda comanda)
    {
        if (string.IsNullOrEmpty(comanda.FormaPagamento))
        {
            await ShowAlert("Por favor, selecione uma forma de pagamento.");
            return;
        }

        foreach (var item in comanda.Itens)
        {
            var movimentacao = new MovimentacaoEstoque()
                {
                    ProdutoId = item.Id,
                    Tipo = TipoMovimentacao.Venda,
                    Quantidade = item.Quantidade,
                    DataMovimentacao = DateTime.Now
                };
            await _apiService.MovimentarEstoqueAsync(movimentacao);
        }

        var sucesso = await _apiService.ConfirmarComanda(comanda);


        if (sucesso.Data)
        {
            await ShowAlert("Comanda finalizada com sucesso.");
            // Remove a comanda finalizada da lista
            ComandasAbertas.RemoveAll(c => c.IdComanda == comanda.IdComanda);
        }
        else
        {
            await ShowAlert("Erro ao finalizar a comanda.");
        }
        StateHasChanged(); // Atualiza a UI
    }

    private async Task Decrementar(ComandaItem itemComanda, string idComanda)
    {
        if (itemComanda.Quantidade == 1) return;

        itemComanda.Quantidade--;
        await _apiService.AtualizaQuantidadeItemComanda(itemComanda.ProdutoId, "diminuir", idComanda);
        AtualizaPrecoTotal(idComanda);
        await Task.Delay(100);
        StateHasChanged(); // Atualiza a UI
    }

    private async Task Incrementar(ComandaItem itemComanda, string idComanda)
    {
        itemComanda.Quantidade++;
        await _apiService.AtualizaQuantidadeItemComanda(itemComanda.ProdutoId, "aumentar", idComanda);
        AtualizaPrecoTotal(idComanda);
        await Task.Delay(100);
        StateHasChanged(); // Atualiza a UI
    }

    private async Task DeletarItem(ComandaItem item, string idComanda)
    {
        bool confirmacao = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este item da comanda?");
        if (confirmacao)
        {
            var sucesso = await _apiService.AtualizaQuantidadeItemComanda(item.ProdutoId, "deletar", idComanda);
            if (sucesso.Data)
            {
                var comanda = ComandasAbertas.FirstOrDefault(c => c.IdComanda == idComanda);
                if (comanda != null)
                {
                    comanda.Itens.Remove(item);
                    await AtualizaPrecoTotal(idComanda);
                }
            }
            else
            {
                await ShowAlert("Erro ao excluir o item.");
            }
        }

    }

    private async Task<List<ComandaItem>> GetItensComanda(string idComanda)
    {
        var (itensComanda, errorMessage) = await _apiService.GetItensComanda(idComanda);
        return itensComanda ?? new List<ComandaItem>();
    }

    private async Task AtualizaPrecoTotal(string idComanda)
    {
        var comanda = ComandasAbertas.FirstOrDefault(c => c.IdComanda == idComanda);
        if (comanda != null)
        {
            comanda.ValorTotal = comanda.Itens.Sum(item => item.PrecoUnitario * item.Quantidade);
            await _apiService.AtualizarComanda(comanda);
        }
    }

    private void CalcularTroco(Comanda comanda)
    {
        var troco = comanda.ValorRecebido - comanda.ValorTotal;
        if (troco < 0) troco = 0;
        // Pode armazenar se quiser em outra propriedade
    }


    private async Task ShowAlert(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}

